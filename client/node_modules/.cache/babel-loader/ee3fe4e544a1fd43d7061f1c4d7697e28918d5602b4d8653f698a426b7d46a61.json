{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lduli\\\\GatorGoalMate\\\\client\\\\src\\\\MainPage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { Link } from 'react-router-dom';\nimport './MainPage.css';\nimport logo from './GatorGoalMateLogo.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction MainPage() {\n  _s();\n  const [loading, setLoading] = useState(true);\n  const [userInput, setUserInput] = useState('');\n  const [showPostForm, setShowPostForm] = useState(false);\n  const [posts, setPosts] = useState([]);\n  const [replyInput, setReplyInput] = useState('');\n  const [showReplyForm, setShowReplyForm] = useState({});\n  const location = useLocation();\n  const username = location.state.username;\n\n  //console.log(\"main page username: \", username);\n\n  const makeAPICall = async () => {\n    try {\n      const response = await fetch('http://localhost:5000/api/posts', {\n        mode: 'cors'\n      });\n      if (!response.ok) {\n        throw new Error('Failed to fetch posts');\n      }\n      const data = await response.json();\n\n      // Process posts and their replies to store in desired order\n      const processedPosts = data.map(post => ({\n        ...post,\n        replies: post.replies.reverse() // Reverse replies to store newest first\n      }));\n      setPosts(processedPosts.reverse()); // Reverse posts to store newest first\n      setLoading(false);\n    } catch (error) {\n      console.error('Error fetching posts:', error.message);\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    makeAPICall();\n  }, []);\n  const handleTogglePostForm = () => {\n    setShowPostForm(!showPostForm);\n  };\n  const handleMakePost = async username => {\n    const newPost = {\n      userName: username,\n      content: userInput,\n      replies: []\n    };\n\n    //console.log(username);\n\n    console.log('New Post:', newPost); // Log the new post object to check if userName is present\n\n    try {\n      const response = await fetch('http://localhost:5000/api/posts', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(newPost)\n      });\n      if (!response.ok) {\n        throw new Error('Failed to create post');\n      }\n      const result = await response.json();\n      newPost._id = result.postId; // Assign the generated postId from the response\n      setPosts([newPost, ...posts]);\n      setUserInput('');\n      setShowPostForm(false);\n    } catch (error) {\n      console.error('Error creating post:', error.message);\n    }\n  };\n\n  // function to DELETE an entire post\n  const handleDeletePost = async (postId, postUserName) => {\n    console.log('Deleting post');\n    console.log('username: ', username);\n    console.log('postUserName: ', postUserName);\n    try {\n      // Check if the post's username matches the current user's username\n      if (postUserName !== username) {\n        console.error('You are not authorized to delete this post.');\n        return;\n      }\n      const response = await fetch(`http://localhost:5000/api/posts/${postId}`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) {\n        throw new Error('Failed to delete post');\n      }\n\n      // Update the posts state to reflect the removal of the deleted post\n      const updatedPosts = posts.filter(post => post._id !== postId);\n      setPosts(updatedPosts);\n    } catch (error) {\n      console.error('Error deleting post:', error.message);\n    }\n  };\n\n  // function to DELETE a reply from an existing post\n  const handleDeleteReply = async (postId, replyIndex, replyUserName) => {\n    console.log('Deleting reply');\n    //console.log('Deleting post: ', postId);\n    //console.log('Reply index: ', replyIndex);\n\n    //console.log('username: ', username);\n    //console.log('replyUserName: ', replyUserName);\n    try {\n      // Check if the reply's username matches the current user's username\n      if (replyUserName !== username) {\n        console.error('You are not authorized to delete this reply.');\n        return;\n      }\n      const response = await fetch(`http://localhost:5000/api/posts/${postId}/replies/${replyIndex}`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) {\n        throw new Error('Failed to delete reply');\n      }\n\n      // Update the posts state to reflect the removal of the deleted reply\n      const updatedPosts = posts.map(post => {\n        if (post._id === postId) {\n          return {\n            ...post,\n            replies: post.replies.filter((_, index) => index !== replyIndex)\n          };\n        }\n        return post;\n      });\n      setPosts(updatedPosts);\n    } catch (error) {\n      console.error('Error deleting reply:', error.message);\n    }\n  };\n  const handleToggleReplyForm = postId => {\n    setShowReplyForm(prevShowReplyForm => ({\n      ...prevShowReplyForm,\n      [postId]: !prevShowReplyForm[postId]\n    }));\n  };\n  const handleMakeReply = async (postId, username) => {\n    const newReply = {\n      userName: username,\n      content: replyInput\n    };\n    try {\n      const response = await fetch(`http://localhost:5000/api/posts/${postId}/replies`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(newReply)\n      });\n      if (!response.ok) {\n        throw new Error('Failed to add reply');\n      }\n\n      // Update the posts state to reflect the newly added reply\n      const updatedPosts = posts.map(post => {\n        if (post._id === postId) {\n          return {\n            ...post,\n            replies: [newReply, ...post.replies]\n          };\n        }\n        return post;\n      });\n      setPosts(updatedPosts);\n      console.log('Updated Posts:', updatedPosts);\n      setReplyInput('');\n      setShowReplyForm(prevShowReplyForm => ({\n        ...prevShowReplyForm,\n        [postId]: false\n      }));\n    } catch (error) {\n      console.error('Error adding reply:', error.message);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"column left\",\n      children: [/*#__PURE__*/_jsxDEV(Link, {\n        to: \"/\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"sidebar-button\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: logo,\n            alt: \"Logo\",\n            className: \"logo-image\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/profile\",\n        state: {\n          username: username\n        },\n        className: \"profile-button\",\n        children: \"Profile\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"post-button\",\n        onClick: handleTogglePostForm,\n        children: \"Post\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"column right\",\n      children: [showPostForm && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"post-form\",\n        children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: userInput,\n          onChange: e => setUserInput(e.target.value),\n          placeholder: \"What's your goal?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"post-button-small\",\n          onClick: () => handleMakePost(username),\n          children: \"\\u2714\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 11\n      }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 11\n      }, this) : posts.map(post => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"post-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: post.userName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 256,\n            columnNumber: 17\n          }, this), \" \", post.content]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"trash-button\",\n          onClick: () => handleDeletePost(post._id, post.userName),\n          children: \"X\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"reply-button\",\n          onClick: () => handleToggleReplyForm(post._id),\n          children: \"Reply\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 15\n        }, this), showReplyForm[post._id] && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"reply-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n            value: replyInput,\n            onChange: e => setReplyInput(e.target.value),\n            placeholder: \"Your reply...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 264,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"reply-button\",\n            onClick: () => handleMakeReply(post._id, username),\n            children: \"\\u2714\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 269,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 17\n        }, this), post.replies.map((reply, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"reply-container\",\n          children: reply && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: reply.userName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 279,\n                columnNumber: 22\n              }, this), \" \", reply.content]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 279,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"trash-button\",\n              onClick: () => handleDeleteReply(post._id, index, reply.userName),\n              children: \"X\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 282,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 15\n        }, this))]\n      }, post._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 13\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 220,\n    columnNumber: 5\n  }, this);\n}\n_s(MainPage, \"zKmr7pMXdrZc7p/ZQZMCFlwyToc=\", false, function () {\n  return [useLocation];\n});\n_c = MainPage;\nexport default MainPage;\nvar _c;\n$RefreshReg$(_c, \"MainPage\");","map":{"version":3,"names":["React","useEffect","useState","useLocation","Link","logo","jsxDEV","_jsxDEV","Fragment","_Fragment","MainPage","_s","loading","setLoading","userInput","setUserInput","showPostForm","setShowPostForm","posts","setPosts","replyInput","setReplyInput","showReplyForm","setShowReplyForm","location","username","state","makeAPICall","response","fetch","mode","ok","Error","data","json","processedPosts","map","post","replies","reverse","error","console","message","handleTogglePostForm","handleMakePost","newPost","userName","content","log","method","headers","body","JSON","stringify","result","_id","postId","handleDeletePost","postUserName","updatedPosts","filter","handleDeleteReply","replyIndex","replyUserName","_","index","handleToggleReplyForm","prevShowReplyForm","handleMakeReply","newReply","className","children","to","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","onClick","value","onChange","e","target","placeholder","reply","_c","$RefreshReg$"],"sources":["C:/Users/lduli/GatorGoalMate/client/src/MainPage.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { Link } from 'react-router-dom';\r\nimport './MainPage.css';\r\nimport logo from './GatorGoalMateLogo.png'; \r\n\r\n\r\nfunction MainPage() {\r\n  const [loading, setLoading] = useState(true);\r\n  const [userInput, setUserInput] = useState('');\r\n  const [showPostForm, setShowPostForm] = useState(false);\r\n  const [posts, setPosts] = useState([]);\r\n  const [replyInput, setReplyInput] = useState('');\r\n  const [showReplyForm, setShowReplyForm] = useState({});\r\n\r\n  const location = useLocation();\r\n  const username = location.state.username;\r\n\r\n  //console.log(\"main page username: \", username);\r\n\r\n  const makeAPICall = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:5000/api/posts', { mode: 'cors' });\r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch posts');\r\n      }\r\n      const data = await response.json();\r\n  \r\n      // Process posts and their replies to store in desired order\r\n      const processedPosts = data.map(post => ({\r\n        ...post,\r\n        replies: post.replies.reverse() // Reverse replies to store newest first\r\n      }));\r\n  \r\n      setPosts(processedPosts.reverse()); // Reverse posts to store newest first\r\n      setLoading(false);\r\n    } catch (error) {\r\n      console.error('Error fetching posts:', error.message);\r\n      setLoading(false);\r\n    }\r\n  };\r\n  \r\n\r\n  useEffect(() => {\r\n    makeAPICall();\r\n  }, []);\r\n\r\n  const handleTogglePostForm = () => {\r\n    setShowPostForm(!showPostForm);\r\n  };\r\n\r\n\r\n\r\n\r\n  const handleMakePost = async (username) => {\r\n  \r\n    const newPost = {\r\n      userName: username,\r\n      content: userInput,\r\n      replies: [],\r\n    };\r\n\r\n    //console.log(username);\r\n\r\n    console.log('New Post:', newPost); // Log the new post object to check if userName is present\r\n    \r\n    try {\r\n      const response = await fetch('http://localhost:5000/api/posts', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(newPost),\r\n      });\r\n  \r\n      if (!response.ok) {\r\n        throw new Error('Failed to create post');\r\n      }\r\n  \r\n      const result = await response.json();\r\n      newPost._id = result.postId; // Assign the generated postId from the response\r\n      setPosts([newPost, ...posts]);\r\n      setUserInput('');\r\n      setShowPostForm(false);\r\n    } catch (error) {\r\n      console.error('Error creating post:', error.message);\r\n    }\r\n  };\r\n\r\n\r\n\r\n\r\n\r\n  // function to DELETE an entire post\r\n  const handleDeletePost = async (postId, postUserName) => {\r\n    console.log('Deleting post');\r\n\r\n    console.log('username: ', username);\r\n    console.log('postUserName: ', postUserName);\r\n\r\n    try {\r\n      // Check if the post's username matches the current user's username\r\n      if (postUserName !== username) {\r\n        console.error('You are not authorized to delete this post.');\r\n        return;\r\n      }\r\n\r\n      const response = await fetch(`http://localhost:5000/api/posts/${postId}`, {\r\n        method: 'DELETE',\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to delete post');\r\n      }\r\n\r\n      // Update the posts state to reflect the removal of the deleted post\r\n      const updatedPosts = posts.filter(post => post._id !== postId);\r\n      setPosts(updatedPosts);\r\n    } catch (error) {\r\n      console.error('Error deleting post:', error.message);\r\n    }\r\n  };\r\n\r\n\r\n\r\n\r\n  // function to DELETE a reply from an existing post\r\n  const handleDeleteReply = async (postId, replyIndex, replyUserName) => {\r\n  console.log('Deleting reply');\r\n  //console.log('Deleting post: ', postId);\r\n  //console.log('Reply index: ', replyIndex);\r\n\r\n  //console.log('username: ', username);\r\n  //console.log('replyUserName: ', replyUserName);\r\n  try {\r\n    // Check if the reply's username matches the current user's username\r\n    if (replyUserName !== username) {\r\n      console.error('You are not authorized to delete this reply.');\r\n      return;\r\n    }\r\n\r\n    const response = await fetch(`http://localhost:5000/api/posts/${postId}/replies/${replyIndex}`, {\r\n      method: 'DELETE',\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Failed to delete reply');\r\n    }\r\n\r\n    // Update the posts state to reflect the removal of the deleted reply\r\n    const updatedPosts = posts.map((post) => {\r\n      if (post._id === postId) {\r\n        return {\r\n          ...post,\r\n          replies: post.replies.filter((_, index) => index !== replyIndex),\r\n        };\r\n      }\r\n      return post;\r\n    });\r\n\r\n    setPosts(updatedPosts);\r\n  } catch (error) {\r\n    console.error('Error deleting reply:', error.message);\r\n  }\r\n};\r\n\r\n  \r\n\r\n\r\n\r\n  const handleToggleReplyForm = (postId) => {\r\n    setShowReplyForm((prevShowReplyForm) => ({\r\n      ...prevShowReplyForm,\r\n      [postId]: !prevShowReplyForm[postId],\r\n    }));\r\n  };\r\n\r\n  const handleMakeReply = async (postId, username) => {\r\n\r\n    const newReply = {\r\n      userName: username,\r\n      content: replyInput,\r\n    };\r\n\r\n    try {\r\n      const response = await fetch(`http://localhost:5000/api/posts/${postId}/replies`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(newReply),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to add reply');\r\n      }\r\n\r\n      // Update the posts state to reflect the newly added reply\r\n      const updatedPosts = posts.map((post) => {\r\n        if (post._id === postId) {\r\n          return {\r\n            ...post,\r\n            replies: [newReply, ...post.replies],\r\n          };\r\n        }\r\n        return post;\r\n      });\r\n\r\n      setPosts(updatedPosts);\r\n      console.log('Updated Posts:', updatedPosts);\r\n\r\n      setReplyInput('');\r\n\r\n      setShowReplyForm((prevShowReplyForm) => ({\r\n        ...prevShowReplyForm,\r\n        [postId]: false,\r\n      }));\r\n    } catch (error) {\r\n      console.error('Error adding reply:', error.message);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"column left\">\r\n\r\n      <Link to=\"/\">\r\n        <button className=\"sidebar-button\">\r\n            <img src={logo} alt=\"Logo\" className=\"logo-image\" />\r\n         </button>\r\n         </Link>\r\n         <Link to=\"/profile\" state={{ username: username}} className=\"profile-button\">Profile</Link>\r\n\r\n          \r\n        <button className=\"post-button\" onClick={handleTogglePostForm}>Post</button>\r\n      </div>\r\n\r\n      <div className=\"column right\">\r\n        \r\n        {/* Post Creation Form */}\r\n        {showPostForm && (\r\n          <div className=\"post-form\">\r\n            <textarea\r\n              value={userInput}\r\n              onChange={(e) => setUserInput(e.target.value)}\r\n              placeholder=\"What's your goal?\"\r\n            />\r\n            <button className='post-button-small' onClick={() => handleMakePost(username)}>✔</button>\r\n\r\n          </div>\r\n        )}\r\n\r\n        {/* Render Posts */}\r\n        {loading ? (\r\n          <p>Loading...</p>\r\n        ) : (\r\n          posts.map((post) => (\r\n            <div key={post._id} className=\"post-container\">\r\n              <p>\r\n                <strong>{post.userName}</strong> {post.content}\r\n              </p>\r\n              <button className=\"trash-button\" onClick={() => handleDeletePost(post._id, post.userName)}>X</button>\r\n              \r\n              {/* Reply Form */}\r\n              <button className=\"reply-button\" onClick={() => handleToggleReplyForm(post._id)}>Reply</button>\r\n              {showReplyForm[post._id] && (\r\n                <div className=\"reply-container\">\r\n                  <textarea\r\n                    value={replyInput}\r\n                    onChange={(e) => setReplyInput(e.target.value)}\r\n                    placeholder=\"Your reply...\"\r\n                  />\r\n                  <button className=\"reply-button\" onClick={() => handleMakeReply(post._id, username)}>✔</button>\r\n\r\n                </div>\r\n              )}\r\n              \r\n              {/* Display Replies */}\r\n              {post.replies.map((reply, index) => (\r\n              <div key={index} className=\"reply-container\">\r\n              {reply && (\r\n                <>\r\n                  <p><strong>{reply.userName}</strong> {reply.content}</p>\r\n                  \r\n                  {/* NEED TO FIX INDEXING AND 'null' PROBLEMS */}\r\n                  <button className=\"trash-button\" onClick={() => handleDeleteReply(post._id, index, reply.userName)}>X</button>\r\n                \r\n                </>\r\n              )}\r\n            </div>\r\n          ))}\r\n            </div>\r\n          ))\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MainPage;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}