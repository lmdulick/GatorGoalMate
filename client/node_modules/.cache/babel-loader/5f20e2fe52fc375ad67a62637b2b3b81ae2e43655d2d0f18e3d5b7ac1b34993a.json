{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lduli\\\\GatorGoalMate\\\\client\\\\src\\\\MainPage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { Link } from 'react-router-dom';\nimport { useContext } from 'react';\nimport { PostContext, PostProvider } from './PostContext';\nimport './MainPage.css';\nimport logo from './GatorGoalMateLogo.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction MainPage() {\n  _s();\n  const [loading, setLoading] = useState(true);\n  const [userInput, setUserInput] = useState('');\n  const [showPostForm, setShowPostForm] = useState(false);\n  const [posts, setPosts] = useState([]);\n  const [replyInput, setReplyInput] = useState('');\n  const [showReplyForm, setShowReplyForm] = useState({});\n  const [image, setImage] = useState(null);\n  const [showAllReplies, setShowAllReplies] = useState({}); // State variable for showing or hiding the photo upload form\n  const [showPhotoForm, setShowPhotoForm] = useState(false);\n\n  // Function for toggling the visibility of the photo upload form\n  const handleTogglePhotoForm = () => {\n    setShowPhotoForm(!showPhotoForm);\n  };\n\n  // Function for handling the uploaded photos\n  function handlePhotoUpload(files) {\n    let file = files[0]; // get the uploaded file\n    let reader = new FileReader();\n    reader.onloadend = function () {\n      // Update the 'image' state with the data URL of the uploaded image\n      setImage(reader.result);\n    };\n    reader.readAsDataURL(file);\n  }\n  const location = useLocation();\n  const username = location.state.username;\n\n  //console.log(\"main page username: \", username);\n\n  const makeAPICall = async () => {\n    try {\n      const response = await fetch('http://localhost:5000/api/posts', {\n        mode: 'cors'\n      });\n      if (!response.ok) {\n        throw new Error('Failed to fetch posts');\n      }\n      const data = await response.json();\n\n      // Process posts and their replies to store in desired order\n      const processedPosts = data.map(post => ({\n        ...post,\n        replies: post.replies.reverse() // Reverse replies to store newest first\n      }));\n      setPosts(processedPosts.reverse()); // Reverse posts to store newest first\n      setLoading(false);\n    } catch (error) {\n      console.error('Error fetching posts:', error.message);\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    makeAPICall();\n  }, []);\n  const handleTogglePostForm = () => {\n    setShowPostForm(!showPostForm);\n  };\n  const handleMakePost = async username => {\n    const newPost = {\n      userName: username,\n      content: userInput,\n      replies: [],\n      image: image\n    };\n\n    //console.log(username);\n\n    console.log('New Post:', newPost); // Log the new post object to check if userName is present\n\n    try {\n      const response = await fetch('http://localhost:5000/api/posts', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(newPost)\n      });\n      if (!response.ok) {\n        throw new Error('Failed to create post');\n      }\n      const result = await response.json();\n      newPost._id = result.postId; // Assign the generated postId from the response\n      setPosts([newPost, ...posts]);\n      setUserInput('');\n      setShowPostForm(false);\n    } catch (error) {\n      console.error('Error creating post:', error.message);\n    }\n  };\n\n  // function to DELETE an entire post\n  const handleDeletePost = async (postId, postUserName) => {\n    console.log('Deleting post');\n    console.log('username: ', username);\n    console.log('postUserName: ', postUserName);\n    try {\n      // Check if the post's username matches the current user's username\n      if (postUserName !== username) {\n        console.error('You are not authorized to delete this post.');\n        return;\n      }\n      const response = await fetch(`http://localhost:5000/api/posts/${postId}`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) {\n        throw new Error('Failed to delete post');\n      }\n\n      // Update the posts state to reflect the removal of the deleted post\n      const updatedPosts = posts.filter(post => post._id !== postId);\n      setPosts(updatedPosts);\n    } catch (error) {\n      console.error('Error deleting post:', error.message);\n    }\n  };\n\n  // function to DELETE a reply from an existing post\n  const handleDeleteReply = async (postId, replyIndex, replyUserName) => {\n    console.log('Deleting reply');\n    //console.log('Deleting post: ', postId);\n    //console.log('Reply index: ', replyIndex);\n\n    //console.log('username: ', username);\n    //console.log('replyUserName: ', replyUserName);\n    try {\n      // Check if the reply's username matches the current user's username\n      if (replyUserName !== username) {\n        console.error('You are not authorized to delete this reply.');\n        return;\n      }\n      const response = await fetch(`http://localhost:5000/api/posts/${postId}/replies/${replyIndex}`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) {\n        throw new Error('Failed to delete reply');\n      }\n\n      // Update the posts state to reflect the removal of the deleted reply\n      const updatedPosts = posts.map(post => {\n        if (post._id === postId) {\n          return {\n            ...post,\n            replies: post.replies.filter((_, index) => index !== replyIndex)\n          };\n        }\n        return post;\n      });\n      setPosts(updatedPosts);\n    } catch (error) {\n      console.error('Error deleting reply:', error.message);\n    }\n  };\n  const handleToggleReplyForm = postId => {\n    setShowReplyForm(prevShowReplyForm => ({\n      ...prevShowReplyForm,\n      [postId]: !prevShowReplyForm[postId]\n    }));\n  };\n  const handleMakeReply = async (postId, username) => {\n    const newReply = {\n      userName: username,\n      content: replyInput\n    };\n    try {\n      const response = await fetch(`http://localhost:5000/api/posts/${postId}/replies`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(newReply)\n      });\n      if (!response.ok) {\n        throw new Error('Failed to add reply');\n      }\n\n      // Update the posts state to reflect the newly added reply\n      const updatedPosts = posts.map(post => {\n        if (post._id === postId) {\n          return {\n            ...post,\n            replies: [newReply, ...post.replies]\n          };\n        }\n        return post;\n      });\n      setPosts(updatedPosts);\n      console.log('Updated Posts:', updatedPosts);\n      setReplyInput('');\n      setShowReplyForm(prevShowReplyForm => ({\n        ...prevShowReplyForm,\n        [postId]: false\n      }));\n    } catch (error) {\n      console.error('Error adding reply:', error.message);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"column left\",\n      children: [/*#__PURE__*/_jsxDEV(Link, {\n        to: \"/\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"sidebar-button\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: logo,\n            alt: \"Logo\",\n            className: \"logo-image\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/profile\",\n        state: {\n          username: username\n        },\n        className: \"profile-button\",\n        children: \"Profile\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"post-button\",\n        onClick: handleTogglePostForm,\n        children: \"Post\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"column right\",\n      children: [showPostForm && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"post-form\",\n        children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: userInput,\n          onChange: e => setUserInput(e.target.value),\n          placeholder: \"What's your goal?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 13\n        }, this), image && /*#__PURE__*/_jsxDEV(\"img\", {\n          src: image,\n          alt: \"Uploaded\",\n          className: \"uploaded-image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 23\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"post-button-small\",\n          onClick: () => handleMakePost(username),\n          children: \"Post\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"photo-form\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleTogglePhotoForm,\n            children: \"Upload Photos\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 258,\n            columnNumber: 15\n          }, this), showPhotoForm && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"photo-container\",\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"file\",\n              onChange: e => handlePhotoUpload(e.target.files)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 261,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 260,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 11\n      }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 11\n      }, this) : posts.map(post => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"post-container\",\n        children: [post.image && /*#__PURE__*/_jsxDEV(\"img\", {\n          src: post.image,\n          alt: \"User Post\",\n          className: \"post-image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: post.userName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 282,\n            columnNumber: 17\n          }, this), \" \", post.content]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"trash-button\",\n          onClick: () => handleDeletePost(post._id, post.userName),\n          children: \"X\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"reply-button\",\n          onClick: () => handleToggleReplyForm(post._id),\n          children: \"Reply\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 15\n        }, this), showReplyForm[post._id] && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"reply-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n            value: replyInput,\n            onChange: e => setReplyInput(e.target.value),\n            placeholder: \"Your reply...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 290,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"reply-button\",\n            onClick: () => handleMakeReply(post._id, username),\n            children: \"\\u2714\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 295,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 17\n        }, this), post.replies.map((reply, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"reply-container\",\n          children: reply && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: reply.userName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 305,\n                columnNumber: 22\n              }, this), \" \", reply.content]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 305,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"trash-button\",\n              onClick: () => handleDeleteReply(post._id, index, reply.userName),\n              children: \"X\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 308,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 15\n        }, this))]\n      }, post._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 13\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 231,\n    columnNumber: 5\n  }, this);\n}\n_s(MainPage, \"/DM4sdHll+qGGFfdPtJixF895co=\", false, function () {\n  return [useLocation];\n});\n_c = MainPage;\nexport default MainPage;\nvar _c;\n$RefreshReg$(_c, \"MainPage\");","map":{"version":3,"names":["React","useEffect","useState","useLocation","Link","useContext","PostContext","PostProvider","logo","jsxDEV","_jsxDEV","Fragment","_Fragment","MainPage","_s","loading","setLoading","userInput","setUserInput","showPostForm","setShowPostForm","posts","setPosts","replyInput","setReplyInput","showReplyForm","setShowReplyForm","image","setImage","showAllReplies","setShowAllReplies","showPhotoForm","setShowPhotoForm","handleTogglePhotoForm","handlePhotoUpload","files","file","reader","FileReader","onloadend","result","readAsDataURL","location","username","state","makeAPICall","response","fetch","mode","ok","Error","data","json","processedPosts","map","post","replies","reverse","error","console","message","handleTogglePostForm","handleMakePost","newPost","userName","content","log","method","headers","body","JSON","stringify","_id","postId","handleDeletePost","postUserName","updatedPosts","filter","handleDeleteReply","replyIndex","replyUserName","_","index","handleToggleReplyForm","prevShowReplyForm","handleMakeReply","newReply","className","children","to","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","onClick","value","onChange","e","target","placeholder","type","reply","_c","$RefreshReg$"],"sources":["C:/Users/lduli/GatorGoalMate/client/src/MainPage.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { Link } from 'react-router-dom';\r\nimport { useContext } from 'react';\r\nimport { PostContext, PostProvider } from './PostContext';\r\nimport './MainPage.css';\r\nimport logo from './GatorGoalMateLogo.png'; \r\n\r\n\r\nfunction MainPage() {\r\n  const [loading, setLoading] = useState(true);\r\n  const [userInput, setUserInput] = useState('');\r\n  const [showPostForm, setShowPostForm] = useState(false);\r\n  const [posts, setPosts] = useState([]);\r\n  const [replyInput, setReplyInput] = useState('');\r\n  const [showReplyForm, setShowReplyForm] = useState({});\r\n\r\n  const [image, setImage] = useState(null);\r\n  const [showAllReplies, setShowAllReplies] = useState({}); // State variable for showing or hiding the photo upload form\r\n  const [showPhotoForm, setShowPhotoForm] = useState(false); \r\n  \r\n  \r\n  // Function for toggling the visibility of the photo upload form\r\n  const handleTogglePhotoForm = () => {\r\n      setShowPhotoForm(!showPhotoForm);\r\n    };\r\n\r\n    // Function for handling the uploaded photos\r\n    function handlePhotoUpload(files) {\r\n      let file = files[0]; // get the uploaded file\r\n      let reader = new FileReader();\r\n      reader.onloadend = function() {\r\n          // Update the 'image' state with the data URL of the uploaded image\r\n          setImage(reader.result);\r\n      }\r\n      reader.readAsDataURL(file);\r\n  }\r\n\r\n  const location = useLocation();\r\n  const username = location.state.username;\r\n\r\n  //console.log(\"main page username: \", username);\r\n\r\n  const makeAPICall = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:5000/api/posts', { mode: 'cors' });\r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch posts');\r\n      }\r\n      const data = await response.json();\r\n  \r\n      // Process posts and their replies to store in desired order\r\n      const processedPosts = data.map(post => ({\r\n        ...post,\r\n        replies: post.replies.reverse() // Reverse replies to store newest first\r\n      }));\r\n  \r\n      setPosts(processedPosts.reverse()); // Reverse posts to store newest first\r\n      setLoading(false);\r\n    } catch (error) {\r\n      console.error('Error fetching posts:', error.message);\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    makeAPICall();\r\n  }, []);\r\n\r\n  const handleTogglePostForm = () => {\r\n    setShowPostForm(!showPostForm);\r\n  };\r\n\r\n\r\n  const handleMakePost = async (username) => {\r\n  \r\n    const newPost = {\r\n      userName: username,\r\n      content: userInput,\r\n      replies: [],\r\n      image: image,\r\n    };\r\n\r\n    //console.log(username);\r\n\r\n    console.log('New Post:', newPost); // Log the new post object to check if userName is present\r\n    \r\n    try {\r\n      const response = await fetch('http://localhost:5000/api/posts', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(newPost),\r\n      });\r\n  \r\n      if (!response.ok) {\r\n        throw new Error('Failed to create post');\r\n      }\r\n  \r\n      const result = await response.json();\r\n      newPost._id = result.postId; // Assign the generated postId from the response\r\n      setPosts([newPost, ...posts]);\r\n      setUserInput('');\r\n      setShowPostForm(false);\r\n    } catch (error) {\r\n      console.error('Error creating post:', error.message);\r\n    }\r\n  };\r\n\r\n  // function to DELETE an entire post\r\n  const handleDeletePost = async (postId, postUserName) => {\r\n    console.log('Deleting post');\r\n\r\n    console.log('username: ', username);\r\n    console.log('postUserName: ', postUserName);\r\n\r\n    try {\r\n      // Check if the post's username matches the current user's username\r\n      if (postUserName !== username) {\r\n        console.error('You are not authorized to delete this post.');\r\n        return;\r\n      }\r\n\r\n      const response = await fetch(`http://localhost:5000/api/posts/${postId}`, {\r\n        method: 'DELETE',\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to delete post');\r\n      }\r\n\r\n      // Update the posts state to reflect the removal of the deleted post\r\n      const updatedPosts = posts.filter(post => post._id !== postId);\r\n      setPosts(updatedPosts);\r\n    } catch (error) {\r\n      console.error('Error deleting post:', error.message);\r\n    }\r\n  };\r\n\r\n\r\n  // function to DELETE a reply from an existing post\r\n  const handleDeleteReply = async (postId, replyIndex, replyUserName) => {\r\n  console.log('Deleting reply');\r\n  //console.log('Deleting post: ', postId);\r\n  //console.log('Reply index: ', replyIndex);\r\n\r\n  //console.log('username: ', username);\r\n  //console.log('replyUserName: ', replyUserName);\r\n  try {\r\n    // Check if the reply's username matches the current user's username\r\n    if (replyUserName !== username) {\r\n      console.error('You are not authorized to delete this reply.');\r\n      return;\r\n    }\r\n\r\n    const response = await fetch(`http://localhost:5000/api/posts/${postId}/replies/${replyIndex}`, {\r\n      method: 'DELETE',\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Failed to delete reply');\r\n    }\r\n\r\n    // Update the posts state to reflect the removal of the deleted reply\r\n    const updatedPosts = posts.map((post) => {\r\n      if (post._id === postId) {\r\n        return {\r\n          ...post,\r\n          replies: post.replies.filter((_, index) => index !== replyIndex),\r\n        };\r\n      }\r\n      return post;\r\n    });\r\n\r\n    setPosts(updatedPosts);\r\n  } catch (error) {\r\n    console.error('Error deleting reply:', error.message);\r\n  }\r\n};\r\n\r\n  const handleToggleReplyForm = (postId) => {\r\n    setShowReplyForm((prevShowReplyForm) => ({\r\n      ...prevShowReplyForm,\r\n      [postId]: !prevShowReplyForm[postId],\r\n    }));\r\n  };\r\n\r\n  const handleMakeReply = async (postId, username) => {\r\n\r\n    const newReply = {\r\n      userName: username,\r\n      content: replyInput,\r\n    };\r\n\r\n    try {\r\n      const response = await fetch(`http://localhost:5000/api/posts/${postId}/replies`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(newReply),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to add reply');\r\n      }\r\n\r\n      // Update the posts state to reflect the newly added reply\r\n      const updatedPosts = posts.map((post) => {\r\n        if (post._id === postId) {\r\n          return {\r\n            ...post,\r\n            replies: [newReply, ...post.replies],\r\n          };\r\n        }\r\n        return post;\r\n      });\r\n\r\n      setPosts(updatedPosts);\r\n      console.log('Updated Posts:', updatedPosts);\r\n\r\n      setReplyInput('');\r\n\r\n      setShowReplyForm((prevShowReplyForm) => ({\r\n        ...prevShowReplyForm,\r\n        [postId]: false,\r\n      }));\r\n    } catch (error) {\r\n      console.error('Error adding reply:', error.message);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"column left\">\r\n\r\n      <Link to=\"/\">\r\n        <button className=\"sidebar-button\">\r\n            <img src={logo} alt=\"Logo\" className=\"logo-image\" />\r\n         </button>\r\n         </Link>\r\n         <Link to=\"/profile\" state={{ username: username}} className=\"profile-button\">Profile</Link>\r\n\r\n          \r\n        <button className=\"post-button\" onClick={handleTogglePostForm}>Post</button>\r\n      </div>\r\n\r\n      <div className=\"column right\">\r\n        \r\n        {/* Post Creation Form */}\r\n        {showPostForm && (\r\n          <div className=\"post-form\">\r\n            <textarea\r\n              value={userInput}\r\n              onChange={(e) => setUserInput(e.target.value)}\r\n              placeholder=\"What's your goal?\"\r\n            />\r\n            {image && <img src={image} alt=\"Uploaded\" className=\"uploaded-image\" />}\r\n            <button className='post-button-small' onClick={() => handleMakePost(username)}>Post</button>\r\n            <div className=\"photo-form\">\r\n              <button onClick={handleTogglePhotoForm}>Upload Photos</button>\r\n              {showPhotoForm && (\r\n                <div className=\"photo-container\">\r\n                  <input\r\n                    type=\"file\"\r\n                    onChange={(e) => handlePhotoUpload(e.target.files)}\r\n                  />\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n\r\n        {/* Render Posts */}\r\n        {loading ? (\r\n          <p>Loading...</p>\r\n        ) : (\r\n          posts.map((post) => (\r\n            <div key={post._id} className=\"post-container\">\r\n              {post.image && (\r\n                    <img src={post.image} alt=\"User Post\" className=\"post-image\" />\r\n              )}\r\n              <p>\r\n                <strong>{post.userName}</strong> {post.content}\r\n              </p>\r\n              <button className=\"trash-button\" onClick={() => handleDeletePost(post._id, post.userName)}>X</button>\r\n              \r\n              {/* Reply Form */}\r\n              <button className=\"reply-button\" onClick={() => handleToggleReplyForm(post._id)}>Reply</button>\r\n              {showReplyForm[post._id] && (\r\n                <div className=\"reply-container\">\r\n                  <textarea\r\n                    value={replyInput}\r\n                    onChange={(e) => setReplyInput(e.target.value)}\r\n                    placeholder=\"Your reply...\"\r\n                  />\r\n                  <button className=\"reply-button\" onClick={() => handleMakeReply(post._id, username)}>✔</button>\r\n\r\n                </div>\r\n              )}\r\n              \r\n              {/* Display Replies */}\r\n              {post.replies.map((reply, index) => (\r\n              <div key={index} className=\"reply-container\">\r\n              {reply && (\r\n                <>\r\n                  <p><strong>{reply.userName}</strong> {reply.content}</p>\r\n                  \r\n                  {/* NEED TO FIX INDEXING AND 'null' PROBLEMS */}\r\n                  <button className=\"trash-button\" onClick={() => handleDeleteReply(post._id, index, reply.userName)}>X</button>\r\n                \r\n                </>\r\n              )}\r\n            </div>\r\n          ))}\r\n            </div>\r\n          ))\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MainPage;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}