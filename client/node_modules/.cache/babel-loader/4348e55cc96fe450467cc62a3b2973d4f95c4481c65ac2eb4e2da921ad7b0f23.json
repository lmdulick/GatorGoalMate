{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lduli\\\\GatorGoalMate\\\\client\\\\src\\\\CreateAccount.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from 'react';\n// import logo from './GatorGoalMateLogo.png'; \n// import './CreateAccount.css'; \n\n// function CreateAccount() {\n//   const [firstName, setFirstName] = useState('');\n//   const [lastName, setLastName] = useState('');\n//   const [email, setEmail] = useState('');\n//   const [username, setUsername] = useState('');\n//   const [password, setPassword] = useState('');\n//   const [confirmPassword, setConfirmPassword] = useState('');\n//   const [loading, setLoading] = useState(true);\n\n//   const makeAPICall = async () => {\n//     try {\n//       const response = await fetch('http://localhost:5000/api/profile', { mode: 'cors' });\n//       const data = await response.json();\n//       setFirstName(data.user);\n//       setLastName(data.user);\n//       setEmail(data.user);\n//       setUsername(data.user);\n//       setPassword(data.user);\n//       setLoading(false);\n//     } catch (error) {\n//       console.error('Error fetching data:', error);\n//       setLoading(false);\n//     }\n//   };\n\n//   const handleSubmit = async (event) => {\n//     event.preventDefault();\n\n//     if (password !== confirmPassword) {\n//       console.log(\"Passwords do not match\");\n//       // Optionally, you can set an error state to display a message to the user\n//       return;\n//     }\n\n//     try {\n//       const response = await fetch('http://localhost:5000/api/profile', {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json'\n//         },\n//         body: JSON.stringify({\n//           firstName,\n//           lastName,\n//           email,\n//           username,\n//           password\n//         })\n//       });\n\n//       if (response.ok) {\n//         console.log(\"Account created successfully\");\n//         // Optionally, you can redirect the user to another page or show a success message\n//       } else {\n//         console.error(\"Failed to create account\");\n//         // Optionally, you can set an error state to display a message to the user\n//       }\n//     } catch (error) {\n//       console.error('Error creating account:', error);\n//       // Optionally, you can set an error state to display a message to the user\n//     }\n//     //console.log(firstName, lastName, email, username, password, confirmPassword);\n//   };\n\n//   useEffect(() => {\n//     makeAPICall();\n//   }, []);\n\n//   return (\n//     <div className=\"container\">\n//       <img src={logo} alt=\"GatorGoalMate Logo\" className=\"logo\" />\n//       <div className=\"form-wrapper\">\n//         <h2>Create Your Account</h2>\n//         <form id=\"accountForm\" onSubmit={handleSubmit}>\n//           <input\n//             type=\"text\"\n//             id=\"firstname\"\n//             placeholder=\"First Name\"\n//             required\n//             value={firstName}\n//             onChange={(e) => setFirstName(e.target.value)}\n//           />\n//           <input\n//             type=\"text\"\n//             id=\"lastname\"\n//             placeholder=\"Last Name\"\n//             required\n//             value={lastName}\n//             onChange={(e) => setLastName(e.target.value)}\n//           />\n//           <input\n//             type=\"email\"\n//             id=\"email\"\n//             placeholder=\"Email (must end with .ufl.edu)\"\n//             required\n//             value={email}\n//             onChange={(e) => setEmail(e.target.value)}\n//           />\n//           <input\n//             type=\"text\"\n//             id=\"username\"\n//             placeholder=\"Username\"\n//             required\n//             value={username}\n//             onChange={(e) => setUsername(e.target.value)}\n//           />\n//           <input\n//             type=\"password\"\n//             id=\"password\"\n//             placeholder=\"Password\"\n//             required\n//             value={password}\n//             onChange={(e) => setPassword(e.target.value)}\n//           />\n//           <input\n//             type=\"password\"\n//             id=\"confirmPassword\"\n//             placeholder=\"Confirm Password\"\n//             required\n//             value={confirmPassword}\n//             onChange={(e) => setConfirmPassword(e.target.value)}\n//           />\n//           <button type=\"submit\" className=\"btn\">Create Account</button>\n//         </form>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default CreateAccount;\n\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport logo from './GatorGoalMateLogo.png';\nimport './CreateAccount.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CreateAccount() {\n  _s();\n  const navigate = useNavigate();\n  const [firstName, setFirstName] = useState('');\n  const [lastName, setLastName] = useState('');\n  const [email, setEmail] = useState('');\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [emailError, setEmailError] = useState(''); // State for email error message\n\n  const validateEmail = email => {\n    return email.endsWith(\"@ufl.edu\");\n  };\n  const handleSubmit = event => {\n    event.preventDefault();\n    // Reset the email error state each time the form is submitted\n    setEmailError('');\n\n    // Check if the email ends with \"@ufl.edu\"\n    if (!validateEmail(email)) {\n      setEmailError('Email must end with \"@ufl.edu\"');\n      return; // Stop form submission if the email is invalid\n    }\n\n    // Backend submission logic should go here\n    console.log(firstName, lastName, email, username, password, confirmPassword);\n\n    // If everything is valid, proceed to the MainPage\n    navigate(\"/\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: logo,\n      alt: \"GatorGoalMate Logo\",\n      className: \"logo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Create Your Account\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        id: \"accountForm\",\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"firstname\",\n          placeholder: \"First Name\",\n          required: true,\n          value: firstName,\n          onChange: e => setFirstName(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"lastname\",\n          placeholder: \"Last Name\",\n          required: true,\n          value: lastName,\n          onChange: e => setLastName(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          id: \"email\",\n          placeholder: \"Email (must end with .ufl.edu)\",\n          required: true,\n          value: email,\n          onChange: e => setEmail(e.target.value),\n          className: emailError ? 'error' : ''\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 11\n        }, this), emailError && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"error-message\",\n          children: emailError\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 26\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"username\",\n          placeholder: \"Username\",\n          required: true,\n          value: username,\n          onChange: e => setUsername(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          id: \"password\",\n          placeholder: \"Password\",\n          required: true,\n          value: password,\n          onChange: e => setPassword(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          id: \"confirmPassword\",\n          placeholder: \"Confirm Password\",\n          required: true,\n          value: confirmPassword,\n          onChange: e => setConfirmPassword(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"btn\",\n          children: \"Create Account\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 174,\n    columnNumber: 5\n  }, this);\n}\n_s(CreateAccount, \"TTSdAcgigfg38gWzdVycVhg/wvM=\", false, function () {\n  return [useNavigate];\n});\n_c = CreateAccount;\nexport default CreateAccount;\nvar _c;\n$RefreshReg$(_c, \"CreateAccount\");","map":{"version":3,"names":["React","useState","useNavigate","logo","jsxDEV","_jsxDEV","CreateAccount","_s","navigate","firstName","setFirstName","lastName","setLastName","email","setEmail","username","setUsername","password","setPassword","confirmPassword","setConfirmPassword","emailError","setEmailError","validateEmail","endsWith","handleSubmit","event","preventDefault","console","log","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","id","onSubmit","type","placeholder","required","value","onChange","e","target","_c","$RefreshReg$"],"sources":["C:/Users/lduli/GatorGoalMate/client/src/CreateAccount.js"],"sourcesContent":["// import React, { useEffect, useState } from 'react';\r\n// import logo from './GatorGoalMateLogo.png'; \r\n// import './CreateAccount.css'; \r\n\r\n// function CreateAccount() {\r\n//   const [firstName, setFirstName] = useState('');\r\n//   const [lastName, setLastName] = useState('');\r\n//   const [email, setEmail] = useState('');\r\n//   const [username, setUsername] = useState('');\r\n//   const [password, setPassword] = useState('');\r\n//   const [confirmPassword, setConfirmPassword] = useState('');\r\n//   const [loading, setLoading] = useState(true);\r\n\r\n\r\n//   const makeAPICall = async () => {\r\n//     try {\r\n//       const response = await fetch('http://localhost:5000/api/profile', { mode: 'cors' });\r\n//       const data = await response.json();\r\n//       setFirstName(data.user);\r\n//       setLastName(data.user);\r\n//       setEmail(data.user);\r\n//       setUsername(data.user);\r\n//       setPassword(data.user);\r\n//       setLoading(false);\r\n//     } catch (error) {\r\n//       console.error('Error fetching data:', error);\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   const handleSubmit = async (event) => {\r\n//     event.preventDefault();\r\n  \r\n//     if (password !== confirmPassword) {\r\n//       console.log(\"Passwords do not match\");\r\n//       // Optionally, you can set an error state to display a message to the user\r\n//       return;\r\n//     }\r\n  \r\n//     try {\r\n//       const response = await fetch('http://localhost:5000/api/profile', {\r\n//         method: 'POST',\r\n//         headers: {\r\n//           'Content-Type': 'application/json'\r\n//         },\r\n//         body: JSON.stringify({\r\n//           firstName,\r\n//           lastName,\r\n//           email,\r\n//           username,\r\n//           password\r\n//         })\r\n//       });\r\n  \r\n//       if (response.ok) {\r\n//         console.log(\"Account created successfully\");\r\n//         // Optionally, you can redirect the user to another page or show a success message\r\n//       } else {\r\n//         console.error(\"Failed to create account\");\r\n//         // Optionally, you can set an error state to display a message to the user\r\n//       }\r\n//     } catch (error) {\r\n//       console.error('Error creating account:', error);\r\n//       // Optionally, you can set an error state to display a message to the user\r\n//     }\r\n//     //console.log(firstName, lastName, email, username, password, confirmPassword);\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     makeAPICall();\r\n//   }, []);\r\n\r\n//   return (\r\n//     <div className=\"container\">\r\n//       <img src={logo} alt=\"GatorGoalMate Logo\" className=\"logo\" />\r\n//       <div className=\"form-wrapper\">\r\n//         <h2>Create Your Account</h2>\r\n//         <form id=\"accountForm\" onSubmit={handleSubmit}>\r\n//           <input\r\n//             type=\"text\"\r\n//             id=\"firstname\"\r\n//             placeholder=\"First Name\"\r\n//             required\r\n//             value={firstName}\r\n//             onChange={(e) => setFirstName(e.target.value)}\r\n//           />\r\n//           <input\r\n//             type=\"text\"\r\n//             id=\"lastname\"\r\n//             placeholder=\"Last Name\"\r\n//             required\r\n//             value={lastName}\r\n//             onChange={(e) => setLastName(e.target.value)}\r\n//           />\r\n//           <input\r\n//             type=\"email\"\r\n//             id=\"email\"\r\n//             placeholder=\"Email (must end with .ufl.edu)\"\r\n//             required\r\n//             value={email}\r\n//             onChange={(e) => setEmail(e.target.value)}\r\n//           />\r\n//           <input\r\n//             type=\"text\"\r\n//             id=\"username\"\r\n//             placeholder=\"Username\"\r\n//             required\r\n//             value={username}\r\n//             onChange={(e) => setUsername(e.target.value)}\r\n//           />\r\n//           <input\r\n//             type=\"password\"\r\n//             id=\"password\"\r\n//             placeholder=\"Password\"\r\n//             required\r\n//             value={password}\r\n//             onChange={(e) => setPassword(e.target.value)}\r\n//           />\r\n//           <input\r\n//             type=\"password\"\r\n//             id=\"confirmPassword\"\r\n//             placeholder=\"Confirm Password\"\r\n//             required\r\n//             value={confirmPassword}\r\n//             onChange={(e) => setConfirmPassword(e.target.value)}\r\n//           />\r\n//           <button type=\"submit\" className=\"btn\">Create Account</button>\r\n//         </form>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default CreateAccount;\r\n\r\nimport React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport logo from './GatorGoalMateLogo.png'; \r\nimport './CreateAccount.css'; \r\n\r\nfunction CreateAccount() {\r\n  const navigate = useNavigate();\r\n  const [firstName, setFirstName] = useState('');\r\n  const [lastName, setLastName] = useState('');\r\n  const [email, setEmail] = useState('');\r\n  const [username, setUsername] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [confirmPassword, setConfirmPassword] = useState('');\r\n  const [emailError, setEmailError] = useState(''); // State for email error message\r\n\r\n  const validateEmail = (email) => {\r\n    return email.endsWith(\"@ufl.edu\");\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    // Reset the email error state each time the form is submitted\r\n    setEmailError('');\r\n\r\n    // Check if the email ends with \"@ufl.edu\"\r\n    if (!validateEmail(email)) {\r\n      setEmailError('Email must end with \"@ufl.edu\"');\r\n      return; // Stop form submission if the email is invalid\r\n    }\r\n\r\n    // Backend submission logic should go here\r\n    console.log(firstName, lastName, email, username, password, confirmPassword);\r\n\r\n    // If everything is valid, proceed to the MainPage\r\n    navigate(\"/\"); \r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <img src={logo} alt=\"GatorGoalMate Logo\" className=\"logo\" />\r\n      <div className=\"form-wrapper\">\r\n        <h2>Create Your Account</h2>\r\n        <form id=\"accountForm\" onSubmit={handleSubmit}>\r\n          <input type=\"text\" id=\"firstname\" placeholder=\"First Name\" required value={firstName} onChange={(e) => setFirstName(e.target.value)} />\r\n          <input type=\"text\" id=\"lastname\" placeholder=\"Last Name\" required value={lastName} onChange={(e) => setLastName(e.target.value)} />\r\n          <input type=\"email\" id=\"email\" placeholder=\"Email (must end with .ufl.edu)\" required value={email} onChange={(e) => setEmail(e.target.value)} className={emailError ? 'error' : ''} />\r\n          {emailError && <div className=\"error-message\">{emailError}</div>}\r\n          <input type=\"text\" id=\"username\" placeholder=\"Username\" required value={username} onChange={(e) => setUsername(e.target.value)} />\r\n          <input type=\"password\" id=\"password\" placeholder=\"Password\" required value={password} onChange={(e) => setPassword(e.target.value)} />\r\n          <input type=\"password\" id=\"confirmPassword\" placeholder=\"Confirm Password\" required value={confirmPassword} onChange={(e) => setConfirmPassword(e.target.value)} />\r\n          <button type=\"submit\" className=\"btn\">Create Account</button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CreateAccount;\r\n"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,IAAI,MAAM,yBAAyB;AAC1C,OAAO,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7B,SAASC,aAAaA,CAAA,EAAG;EAAAC,EAAA;EACvB,MAAMC,QAAQ,GAAGN,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACO,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACU,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACY,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACc,QAAQ,EAAEC,WAAW,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACgB,QAAQ,EAAEC,WAAW,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACkB,eAAe,EAAEC,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"},"metadata":{},"sourceType":"module","externalDependencies":[]}