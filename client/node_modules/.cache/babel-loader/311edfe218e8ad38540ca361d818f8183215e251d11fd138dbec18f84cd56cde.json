{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lduli\\\\GatorGoalMate\\\\client\\\\src\\\\MainPage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { Link } from 'react-router-dom';\nimport './MainPage.css';\nimport logo from './GatorGoalMateLogo.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MainPage() {\n  _s();\n  const [loading, setLoading] = useState(true);\n  const [userInput, setUserInput] = useState('');\n  const [showPostForm, setShowPostForm] = useState(false);\n  const [posts, setPosts] = useState([]);\n  const [replyInput, setReplyInput] = useState('');\n  const [showReplyForm, setShowReplyForm] = useState({});\n  const location = useLocation();\n  const username = location.state.username;\n\n  //console.log(\"main page username: \", username);\n\n  const makeAPICall = async () => {\n    try {\n      const response = await fetch('http://localhost:5000/api/posts', {\n        mode: 'cors'\n      });\n      if (!response.ok) {\n        throw new Error('Failed to fetch posts');\n      }\n      const data = await response.json();\n      const reversedPosts = data.reverse();\n      setPosts(reversedPosts);\n      setLoading(false);\n    } catch (error) {\n      console.error('Error fetching posts:', error.message);\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    makeAPICall();\n  }, []);\n  const handleTogglePostForm = () => {\n    setShowPostForm(!showPostForm);\n  };\n  const handleMakePost = async username => {\n    const newPost = {\n      userName: username,\n      content: userInput,\n      replies: []\n    };\n\n    //console.log(username);\n\n    console.log('New Post:', newPost); // Log the new post object to check if userName is present\n\n    try {\n      const response = await fetch('http://localhost:5000/api/posts', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(newPost)\n      });\n      if (!response.ok) {\n        throw new Error('Failed to create post');\n      }\n      const result = await response.json();\n      newPost._id = result.postId; // Assign the generated postId from the response\n      setPosts([newPost, ...posts]);\n      setUserInput('');\n      setShowPostForm(false);\n    } catch (error) {\n      console.error('Error creating post:', error.message);\n    }\n  };\n\n  // const handleDeleteReply = async (postId, replyId) => {\n  //   console.log('Deleting reply:', postId, replyId);\n\n  //   try {\n  //     const response = await fetch(`http://localhost:5000/api/posts/${postId}/replies/${replyId}`, {\n  //       method: 'DELETE',\n  //     });\n\n  //     if (!response.ok) {\n  //       throw new Error('Failed to delete reply');\n  //     }\n\n  //     // Update the posts state to reflect the removal of the deleted reply\n  //     const updatedPosts = posts.map((post) => {\n  //       if (post._id === postId) {\n  //         return {\n  //           ...post,\n  //           replies: post.replies.filter((reply) => reply._id !== replyId),\n  //         };\n  //       }\n  //       return post;\n  //     });\n\n  //     setPosts(updatedPosts);\n  //   } catch (error) {\n  //     console.error('Error deleting reply:', error.message);\n  //   }\n  // };\n  // };\n\n  const handleDeleteReply = async (postId, replyId, replyUserName) => {\n    console.log('Deleting reply:', postId, replyId);\n    try {\n      // Check if the reply's username matches the current user's username\n      if (replyUserName !== username) {\n        console.error('You are not authorized to delete this reply.');\n        return;\n      }\n      const response = await fetch(`http://localhost:5000/api/posts/${postId}/replies/${replyId}`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) {\n        throw new Error('Failed to delete reply');\n      }\n\n      // Update the posts state to reflect the removal of the deleted reply\n      const updatedPosts = posts.map(post => {\n        if (post._id === postId) {\n          return {\n            ...post,\n            replies: post.replies.filter(reply => reply._id !== replyId)\n          };\n        }\n        return post;\n      });\n      setPosts(updatedPosts);\n    } catch (error) {\n      console.error('Error deleting reply:', error.message);\n    }\n  };\n  const handleToggleReplyForm = postId => {\n    setShowReplyForm(prevShowReplyForm => ({\n      ...prevShowReplyForm,\n      [postId]: !prevShowReplyForm[postId]\n    }));\n  };\n  const handleMakeReply = async (postId, username) => {\n    const newReply = {\n      userName: username,\n      content: replyInput\n    };\n    try {\n      const response = await fetch(`http://localhost:5000/api/posts/${postId}/replies`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(newReply)\n      });\n      if (!response.ok) {\n        throw new Error('Failed to add reply');\n      }\n\n      // Update the posts state to reflect the newly added reply\n      const updatedPosts = posts.map(post => {\n        if (post._id === postId) {\n          return {\n            ...post,\n            replies: [newReply, ...post.replies]\n          };\n        }\n        return post;\n      });\n      setPosts(updatedPosts);\n      console.log('Updated Posts:', updatedPosts);\n      setReplyInput('');\n      setShowReplyForm(prevShowReplyForm => ({\n        ...prevShowReplyForm,\n        [postId]: false\n      }));\n    } catch (error) {\n      console.error('Error adding reply:', error.message);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"column left\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"sidebar-button\",\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: logo,\n            alt: \"Logo\",\n            className: \"logo-image\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/profile\",\n        state: {\n          username: username\n        },\n        className: \"profile-button\",\n        children: \"Profile\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"post-button\",\n        onClick: handleTogglePostForm,\n        children: \"Post\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"column right\",\n      children: [showPostForm && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"post-form\",\n        children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: userInput,\n          onChange: e => setUserInput(e.target.value),\n          placeholder: \"What's your goal?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"post-button\",\n          onClick: () => handleMakePost(username),\n          children: \"Post\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 11\n      }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 11\n      }, this) : posts.map(post => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"post-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: post.userName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 253,\n            columnNumber: 17\n          }, this), \" \", post.content]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"reply-button\",\n          onClick: () => handleToggleReplyForm(post._id),\n          children: \"Reply\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 15\n        }, this), showReplyForm[post._id] && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"reply-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n            value: replyInput,\n            onChange: e => setReplyInput(e.target.value),\n            placeholder: \"Your reply...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 259,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"reply-button\",\n            onClick: () => handleMakeReply(post._id, username),\n            children: \"\\u2714\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 264,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 17\n        }, this), post.replies.slice().reverse().map((reply, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"reply-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: reply.userName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 271,\n              columnNumber: 22\n            }, this), \" \", reply.content]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 271,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"trash-button\",\n            onClick: () => handleDeleteReply(post._id, reply._id),\n            children: \"X\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 19\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 17\n        }, this))]\n      }, post._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 13\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 217,\n    columnNumber: 5\n  }, this);\n}\n_s(MainPage, \"zKmr7pMXdrZc7p/ZQZMCFlwyToc=\", false, function () {\n  return [useLocation];\n});\n_c = MainPage;\nexport default MainPage;\nvar _c;\n$RefreshReg$(_c, \"MainPage\");","map":{"version":3,"names":["React","useEffect","useState","useLocation","Link","logo","jsxDEV","_jsxDEV","MainPage","_s","loading","setLoading","userInput","setUserInput","showPostForm","setShowPostForm","posts","setPosts","replyInput","setReplyInput","showReplyForm","setShowReplyForm","location","username","state","makeAPICall","response","fetch","mode","ok","Error","data","json","reversedPosts","reverse","error","console","message","handleTogglePostForm","handleMakePost","newPost","userName","content","replies","log","method","headers","body","JSON","stringify","result","_id","postId","handleDeleteReply","replyId","replyUserName","updatedPosts","map","post","filter","reply","handleToggleReplyForm","prevShowReplyForm","handleMakeReply","newReply","className","children","to","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","onClick","value","onChange","e","target","placeholder","slice","index","_c","$RefreshReg$"],"sources":["C:/Users/lduli/GatorGoalMate/client/src/MainPage.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { Link } from 'react-router-dom';\r\nimport './MainPage.css';\r\nimport logo from './GatorGoalMateLogo.png'; \r\n\r\n\r\nfunction MainPage() {\r\n  const [loading, setLoading] = useState(true);\r\n  const [userInput, setUserInput] = useState('');\r\n  const [showPostForm, setShowPostForm] = useState(false);\r\n  const [posts, setPosts] = useState([]);\r\n  const [replyInput, setReplyInput] = useState('');\r\n  const [showReplyForm, setShowReplyForm] = useState({});\r\n\r\n  const location = useLocation();\r\n  const username = location.state.username;\r\n\r\n  //console.log(\"main page username: \", username);\r\n\r\n  const makeAPICall = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:5000/api/posts', { mode: 'cors' });\r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch posts');\r\n      }\r\n      const data = await response.json();\r\n      const reversedPosts = data.reverse();\r\n      setPosts(reversedPosts);\r\n      setLoading(false);\r\n    } catch (error) {\r\n      console.error('Error fetching posts:', error.message);\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    makeAPICall();\r\n  }, []);\r\n\r\n  const handleTogglePostForm = () => {\r\n    setShowPostForm(!showPostForm);\r\n  };\r\n\r\n\r\n\r\n\r\n  const handleMakePost = async (username) => {\r\n  \r\n    const newPost = {\r\n      userName: username,\r\n      content: userInput,\r\n      replies: [],\r\n    };\r\n\r\n    //console.log(username);\r\n\r\n    console.log('New Post:', newPost); // Log the new post object to check if userName is present\r\n    \r\n    try {\r\n      const response = await fetch('http://localhost:5000/api/posts', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(newPost),\r\n      });\r\n  \r\n      if (!response.ok) {\r\n        throw new Error('Failed to create post');\r\n      }\r\n  \r\n      const result = await response.json();\r\n      newPost._id = result.postId; // Assign the generated postId from the response\r\n      setPosts([newPost, ...posts]);\r\n      setUserInput('');\r\n      setShowPostForm(false);\r\n    } catch (error) {\r\n      console.error('Error creating post:', error.message);\r\n    }\r\n  };\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  // const handleDeleteReply = async (postId, replyId) => {\r\n  //   console.log('Deleting reply:', postId, replyId);\r\n  \r\n  //   try {\r\n  //     const response = await fetch(`http://localhost:5000/api/posts/${postId}/replies/${replyId}`, {\r\n  //       method: 'DELETE',\r\n  //     });\r\n  \r\n  //     if (!response.ok) {\r\n  //       throw new Error('Failed to delete reply');\r\n  //     }\r\n  \r\n  //     // Update the posts state to reflect the removal of the deleted reply\r\n  //     const updatedPosts = posts.map((post) => {\r\n  //       if (post._id === postId) {\r\n  //         return {\r\n  //           ...post,\r\n  //           replies: post.replies.filter((reply) => reply._id !== replyId),\r\n  //         };\r\n  //       }\r\n  //       return post;\r\n  //     });\r\n  \r\n  //     setPosts(updatedPosts);\r\n  //   } catch (error) {\r\n  //     console.error('Error deleting reply:', error.message);\r\n  //   }\r\n  // };\r\n  // };\r\n  \r\n  const handleDeleteReply = async (postId, replyId, replyUserName) => {\r\n    console.log('Deleting reply:', postId, replyId);\r\n    \r\n    try {\r\n      // Check if the reply's username matches the current user's username\r\n      if (replyUserName !== username) {\r\n        console.error('You are not authorized to delete this reply.');\r\n        return;\r\n      }\r\n  \r\n      const response = await fetch(`http://localhost:5000/api/posts/${postId}/replies/${replyId}`, {\r\n        method: 'DELETE',\r\n      });\r\n  \r\n      if (!response.ok) {\r\n        throw new Error('Failed to delete reply');\r\n      }\r\n  \r\n      // Update the posts state to reflect the removal of the deleted reply\r\n      const updatedPosts = posts.map((post) => {\r\n        if (post._id === postId) {\r\n          return {\r\n            ...post,\r\n            replies: post.replies.filter((reply) => reply._id !== replyId),\r\n          };\r\n        }\r\n        return post;\r\n      });\r\n  \r\n      setPosts(updatedPosts);\r\n    } catch (error) {\r\n      console.error('Error deleting reply:', error.message);\r\n    }\r\n  };\r\n  \r\n  \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  const handleToggleReplyForm = (postId) => {\r\n    setShowReplyForm((prevShowReplyForm) => ({\r\n      ...prevShowReplyForm,\r\n      [postId]: !prevShowReplyForm[postId],\r\n    }));\r\n  };\r\n\r\n  const handleMakeReply = async (postId, username) => {\r\n\r\n    const newReply = {\r\n      userName: username,\r\n      content: replyInput,\r\n    };\r\n\r\n    try {\r\n      const response = await fetch(`http://localhost:5000/api/posts/${postId}/replies`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(newReply),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to add reply');\r\n      }\r\n\r\n      // Update the posts state to reflect the newly added reply\r\n      const updatedPosts = posts.map((post) => {\r\n        if (post._id === postId) {\r\n          return {\r\n            ...post,\r\n            replies: [newReply, ...post.replies],\r\n          };\r\n        }\r\n        return post;\r\n      });\r\n\r\n      setPosts(updatedPosts);\r\n      console.log('Updated Posts:', updatedPosts);\r\n\r\n      setReplyInput('');\r\n\r\n      setShowReplyForm((prevShowReplyForm) => ({\r\n        ...prevShowReplyForm,\r\n        [postId]: false,\r\n      }));\r\n    } catch (error) {\r\n      console.error('Error adding reply:', error.message);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"column left\">\r\n\r\n        <button className=\"sidebar-button\">\r\n          <Link to=\"/\">\r\n            <img src={logo} alt=\"Logo\" className=\"logo-image\" />\r\n          </Link>\r\n         </button>\r\n\r\n         <Link to=\"/profile\" state={{ username: username}} className=\"profile-button\">Profile</Link>\r\n\r\n          \r\n        <button className=\"post-button\" onClick={handleTogglePostForm}>Post</button>\r\n      </div>\r\n\r\n      <div className=\"column right\">\r\n        {/* Post Creation Form */}\r\n        {showPostForm && (\r\n          <div className=\"post-form\">\r\n            <textarea\r\n              value={userInput}\r\n              onChange={(e) => setUserInput(e.target.value)}\r\n              placeholder=\"What's your goal?\"\r\n            />\r\n            <button className='post-button' onClick={() => handleMakePost(username)}>Post</button>\r\n\r\n          </div>\r\n        )}\r\n\r\n        {/* Render Posts */}\r\n        {loading ? (\r\n          <p>Loading...</p>\r\n        ) : (\r\n          posts.map((post) => (\r\n            <div key={post._id} className=\"post-container\">\r\n              <p>\r\n                <strong>{post.userName}</strong> {post.content}\r\n              </p>\r\n              {/* Reply Form */}\r\n              <button className=\"reply-button\" onClick={() => handleToggleReplyForm(post._id)}>Reply</button>\r\n              {showReplyForm[post._id] && (\r\n                <div className=\"reply-container\">\r\n                  <textarea\r\n                    value={replyInput}\r\n                    onChange={(e) => setReplyInput(e.target.value)}\r\n                    placeholder=\"Your reply...\"\r\n                  />\r\n                  <button className=\"reply-button\" onClick={() => handleMakeReply(post._id, username)}>✔</button>\r\n\r\n                </div>\r\n              )}\r\n              {/* Display Replies */}\r\n              {post.replies.slice().reverse().map((reply, index) => (\r\n                <div key={index} className=\"reply-container\">\r\n                  <p><strong>{reply.userName}</strong> {reply.content}</p>\r\n                  <button className=\"trash-button\" onClick={() => handleDeleteReply(post._id, reply._id)}>X</button>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          ))\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MainPage;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}